(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{169:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._m(1),a("p",[t._v("当变量使用 "),a("a",{attrs:{href:"https://www.ecma-international.org/ecma-262/8.0/#sec-variable-statement",target:"_blank",rel:"noopener noreferrer"}},[t._v("var"),a("OutboundLink")],1),t._v(" 声明时，在执行当前作用域内（此时，因为 "),a("code",[t._v("var")]),t._v(" 关键字的特性，仅需区分全局或函数作用域，而不是代码块。）的代码之前，会首先将作用域内所有 "),a("code",[t._v("var")]),t._v(" 关键字所声明的变量提前到当前作用域的最前处统一声明，且 "),a("strong",[t._v("初始化")]),t._v(" 为统一值 "),a("code",[t._v("undefined")]),t._v("。")]),t._m(2),t._m(3),t._m(4),a("p",[t._v("另外，只有函数声明存在提升现象，函数表达式函数体不会被提升。")]),t._m(5),a("p",[t._v("ES6 之后的 "),a("a",{attrs:{href:"https://www.ecma-international.org/ecma-262/8.0/#sec-let-and-const-declarations",target:"_blank",rel:"noopener noreferrer"}},[t._v("let"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://www.ecma-international.org/ecma-262/8.0/#sec-let-and-const-declarations",target:"_blank",rel:"noopener noreferrer"}},[t._v("const"),a("OutboundLink")],1),t._v(" 他们都是不存在声明提前的。即只能在使用 "),a("code",[t._v("let")]),t._v(" 和 "),a("code",[t._v("const")]),t._v(" 关键字声明变量之后才能使用该变量，之前的区域称为暂时性死区。")]),a("p",[t._v("对变量提升的理解可拓展为对作用域的理解。")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"变量提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量提升","aria-hidden":"true"}},[this._v("#")]),this._v(" 变量提升")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"现象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#现象","aria-hidden":"true"}},[this._v("#")]),this._v(" 现象")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"函数声明提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数声明提升","aria-hidden":"true"}},[this._v("#")]),this._v(" 函数声明提升")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("使用 "),s("code",[this._v("function")]),this._v(" 关键字声明函数（另外，函数表达式中，函数本身并不提升）时，存在与 "),s("code",[this._v("var")]),this._v(" 关键字同样的声明提升现象。特别地，函数声明提升的优先级 "),s("strong",[this._v("高于")]),this._v(" 变量提升的优先级。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// function test () {}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" test "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// test 变量被覆盖，最终该作用域内的 test 变量将存储基本类型值 1")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("test")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"拓展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拓展","aria-hidden":"true"}},[this._v("#")]),this._v(" 拓展")])}],!1,null,null,null);s.default=n.exports}}]);