(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{167:function(t,e,s){"use strict";s.r(e);var n=s(0),r=Object(n.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),s("p",[t._v("（本节为 "),s("a",{attrs:{href:"https://lbwa.github.io/2018/03/08/Event-loop/",target:"_blank",rel:"noopener noreferrer"}},[t._v("我的博客 —— 理解 event loop 机制"),s("OutboundLink")],1),t._v(" 的重新归纳。）")]),t._m(1),s("p",[t._v("存在两种 "),s("code",[t._v("event loops")]),t._v("（"),s("a",{attrs:{href:"https://www.w3.org/TR/html5/webappapis.html#event-loop",target:"_blank",rel:"noopener noreferrer"}},[t._v("W3C"),s("OutboundLink")],1),t._v("），即一种在 "),s("code",[t._v("browsing context")]),t._v(" 下的事件循环，一种是在 "),s("code",[t._v("web workers")]),t._v(" 下的循环。本文讨论在 "),s("code",[t._v("browsing context")]),t._v(" 下的事件循环。")]),t._m(2),s("p",[t._v("依据标准中对进程模型的流程描述（"),s("a",{attrs:{href:"https://www.w3.org/TR/html5/webappapis.html#event-loops-processing-model",target:"_blank",rel:"noopener noreferrer"}},[t._v("来源"),s("OutboundLink")],1),t._v("）可得出，在完成一个宏任务，并清空因宏任务产生的微任务队列时，称之为一个事件循环。")]),t._m(3),s("ul",[s("li",[s("p",[t._v("宏任务（macrotask）：")]),s("ol",[s("li",[s("p",[t._v("script")]),s("ul",[s("li",[s("p",[t._v("整体代码（"),s("a",{attrs:{href:"https://www.ecma-international.org/ecma-262/#script-record",target:"_blank",rel:"noopener noreferrer"}},[t._v("来源"),s("OutboundLink")],1),t._v("），即代码执行的基准执行上下文（"),s("router-link",{attrs:{to:"js-execution-context/js-execution-context.html"}},[t._v("章节 —— 执行上下文")]),t._v("）")],1)]),s("li",[t._m(4),s("ul",[s("li",[s("p",[t._v("执行上下文栈初始会设置 "),s("code",[t._v("script")]),t._v(" 为 "),s("code",[t._v("当前正在运行执行上下文")]),t._v("（"),s("code",[t._v("running execution context")]),t._v("），这期间可能因执行而创建新的执行上下文，那么就会依据模块内的代码不断的设置 "),s("strong",[t._v("当前正在运行执行上下文")]),t._v("（"),s("code",[t._v("running execution context")]),t._v("），这样模块内的代码就会依次得以执行（此处主要是章节 —— "),s("router-link",{attrs:{to:"js-execution-context/js-execution-context.html"}},[t._v("执行上下文")]),t._v(" 中 "),s("code",[t._v("Running execution context 的更替")]),t._v(" 的实际应用）。")],1)]),t._m(5)])])])]),t._m(6),s("li",[s("p",[t._v("I/O")]),s("ul",[s("li",[s("p",[t._v("可拓展至 Web API（"),s("a",{attrs:{href:"https://www.w3.org/TR/html5/webappapis.html#generic-task-sources",target:"_blank",rel:"noopener noreferrer"}},[t._v("来源"),s("OutboundLink")],1),t._v("）：")]),s("ol",[t._m(7),t._m(8),t._m(9),s("li",[s("p",[t._v("用户交互")]),s("ul",[t._m(10),s("li",[s("p",[t._v("特别地，事件需要冒泡到 "),s("code",[t._v("document")]),t._v(" 对象之后并且事件回调执行"),s("strong",[t._v("完成后")]),t._v("，才算该宏任务执行完成。否则一直存在于执行上下文栈中，等待事件冒泡并事件回调完成（来源：Jake Archibald blog - "),s("a",{attrs:{href:"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/",target:"_blank",rel:"noopener noreferrer"}},[t._v("level 1 boss fight"),s("OutboundLink")],1),t._v("）。")])])])])])])])])]),t._m(11)]),s("li",[s("p",[t._v("微任务（microtask）:")]),s("ol",[s("li",[s("p",[t._v("process.nextTick（"),s("a",{attrs:{href:"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#process-nexttick",target:"_blank",rel:"noopener noreferrer"}},[t._v("Node.js"),s("OutboundLink")],1),t._v("）")])]),t._m(12),s("li",[s("p",[t._v("MutationObserver（"),s("a",{attrs:{href:"https://dom.spec.whatwg.org/#queue-a-mutation-record",target:"_blank",rel:"noopener noreferrer"}},[t._v("DOM Standard"),s("OutboundLink")],1),t._v("）")]),t._m(13)]),t._m(14)])]),s("li",[s("p",[s("strong",[t._v("特别注明")]),t._v("：在 "),s("code",[t._v("ECMAScript")]),t._v(" 中称 "),s("code",[t._v("microtask")]),t._v(" 为 "),s("code",[t._v("jobs")]),t._v("（"),s("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/#sec-performpromisethen",target:"_blank",rel:"noopener noreferrer"}},[t._v("来源"),s("OutboundLink")],1),t._v("，其中 "),s("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/#sec-enqueuejob",target:"_blank",rel:"noopener noreferrer"}},[t._v("EnqueueJob"),s("OutboundLink")],1),t._v(" 即指添加一个 "),s("code",[t._v("microtask")]),t._v("）。")])])]),t._m(15),t._m(16),t._m(17),s("ul",[t._m(18),s("li",[s("p",[t._v("根据 "),s("code",[t._v("W3C")]),t._v("（"),s("a",{attrs:{href:"https://www.w3.org/TR/html5/webappapis.html#microtask",target:"_blank",rel:"noopener noreferrer"}},[t._v("来源"),s("OutboundLink")],1),t._v("）关于 "),s("code",[t._v("microtask")]),t._v(" 的描述，只有两种微任务类型：单独的回调函数微任务（solitary callback microtasks），复合微任务（compound microtasks）。那么即在 "),s("code",[t._v("W3C")]),t._v(" 规范中"),s("strong",[t._v("所有")]),t._v("的"),s("strong",[t._v("单独的回调函数")]),t._v("都是"),s("strong",[t._v("微任务")]),t._v("类型。")]),s("ul",[t._m(19),s("li",[s("p",[t._v("compound microtask：")]),s("ol",[s("li",[s("p",[t._v("MutationObserver（"),s("a",{attrs:{href:"https://dom.spec.whatwg.org/#queue-a-mutation-record",target:"_blank",rel:"noopener noreferrer"}},[t._v("DOM Standard - 4.3.2 步骤 5"),s("OutboundLink")],1),t._v("）")])]),s("li",[s("p",[t._v("process.nextTick（Only for "),s("a",{attrs:{href:"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#process-nexttick",target:"_blank",rel:"noopener noreferrer"}},[t._v("Node.js"),s("OutboundLink")],1),t._v("）")]),t._m(20)])])])])]),s("li",[s("p",[t._v("特别指明，"),s("code",[t._v("Web API")]),t._v(" （event loops 章节在标准中是属于 Web API 大类）是属于宏任务类型，如 "),s("code",[t._v("Ajax")]),t._v(" 属于 "),s("code",[t._v("I/O")]),t._v("（来源："),s("a",{attrs:{href:"https://www.w3.org/TR/html5/webappapis.html#task-queues",target:"_blank",rel:"noopener noreferrer"}},[t._v("using a resource"),s("OutboundLink")],1),t._v("），但 "),s("code",[t._v("Ajax")]),t._v(" 调用的 "),s("code",[t._v("Promise")]),t._v(" 类型回调函数都是微任务类型。")])])]),t._m(21),t._m(22),t._m(23),t._m(24),t._m(25),s("ul",[s("li",[s("p",[t._v("依据标准"),s("a",{attrs:{href:"https://www.w3.org/TR/html5/webappapis.html#microtask",target:"_blank",rel:"noopener noreferrer"}},[t._v("描述"),s("OutboundLink")],1),t._v("，除非特别指明是 "),s("code",[t._v("microtask queue")]),t._v("，那么我们一般常说的任务队列（"),s("code",[t._v("task queue")]),t._v("）都是指 "),s("code",[t._v("宏任务队列")]),t._v("（"),s("code",[t._v("macrotask queue")]),t._v("）。")])]),t._m(26),s("li",[t._m(27),s("ol",[s("li",[s("p",[t._v("可重入调用（"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Reentrancy_(computing)",target:"_blank",rel:"noopener noreferrer"}},[t._v("reentrant invocation"),s("OutboundLink")],1),t._v("）是指，算法在执行过程中意外中断时，在当前调用未完成的情况下被再次从头开始执行。一旦可重入执行完成，上一次被中断的调用将会恢复执行。")])]),s("li",[s("p",[t._v("设置该检查点的原因是：")]),s("ul",[s("li",[t._v("执行微任务时，可能会调用其他回调函数，当其他回调函数时，并在弹出执行上下文栈时，会断言当前执行上下文栈是否为空，若为空时，那么就会再一次执行 "),s("code",[t._v("microtask checkpoint")]),t._v("（来源："),s("a",{attrs:{href:"https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint",target:"_blank",rel:"noopener noreferrer"}},[t._v("perform a microtask checkpoint - step 2.3"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-script",target:"_blank",rel:"noopener noreferrer"}},[t._v("clean up after running script"),s("OutboundLink")],1),t._v("），若没有设置检查点执行标志的话就会再次进入 "),s("code",[t._v("microtask queue")]),t._v(" 重复执行 "),s("code",[t._v("microtask")]),t._v("。")])])])])])]),s("p",[t._v("（"),s("a",{attrs:{href:"https://www.w3.org/TR/html5/webappapis.html#event-loops-processing-model",target:"_blank",rel:"noopener noreferrer"}},[t._v("来源"),s("OutboundLink")],1),t._v("）")]),s("ol",[t._m(28),t._m(29),s("li",[s("p",[s("code",[t._v("Run")]),t._v("：执行当前被选出的 task（即 task 进入最上层"),s("router-link",{attrs:{to:"js-execution-context/js-execution-context.html"}},[t._v("执行上下文栈")]),s("code",[t._v("execution context stack")]),t._v("）。")],1)]),t._m(30),t._m(31),s("li",[t._m(32),s("ul",[s("li",[t._m(33),s("ol",[t._m(34),t._m(35),t._m(36),t._m(37),s("li",[s("p",[s("code",[t._v("Run")]),t._v("：执行选中的 "),s("code",[t._v("microtask")]),t._v("（进入最上层"),s("router-link",{attrs:{to:"js-execution-context/js-execution-context.html"}},[t._v("执行上下文栈")]),t._v("（来源1："),s("a",{attrs:{href:"https://html.spec.whatwg.org/#enqueuejob(queuename,-job,-arguments):queue-a-microtask",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML Standard EnqueueJob 7.6"),s("OutboundLink")],1),t._v("、来源2："),s("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/#sec-enqueuejob",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMAScript EnqueueJob 步骤4"),s("OutboundLink")],1),t._v("））。")],1)]),t._m(38),t._m(39),s("li",[t._m(40),s("ul",[s("li",[s("p",[t._v("个人理解为触发浏览器 "),s("code",[t._v("uncaught")]),t._v(" 事件，并抛出 "),s("code",[t._v("unhandled promise rejections")]),t._v(" 错误（"),s("a",{attrs:{href:"https://www.w3.org/TR/html5/webappapis.html#notify-about-rejected-promises",target:"_blank",rel:"noopener noreferrer"}},[t._v("W3C"),s("OutboundLink")],1),t._v("）。")])]),t._m(41)])]),t._m(42),t._m(43)])]),s("li",[t._m(44),s("ol",[t._m(45),t._m(46),t._m(47),s("li",[s("p",[t._v("执行 "),s("code",[t._v("子任务")]),t._v("（进入"),s("router-link",{attrs:{to:"js-execution-context/js-execution-context.html"}},[t._v("执行上下文栈")]),t._v("）。")],1)]),t._m(48)])])])]),t._m(49),t._m(50),t._m(51)]),t._m(52),s("p",[t._v("以一个示例讲解事件循环：")]),t._m(53),t._m(54),s("p",[t._v("执行原理（依据 Chrome 66 的 V8 实现）如下：")]),s("ol",[s("li",[s("p",[t._v("整个代码段 "),s("code",[t._v("script")]),t._v(" 进入执行上下文栈（亦称调用栈，"),s("code",[t._v("call stack")]),t._v("（"),s("router-link",{attrs:{to:"js-execution-context/js-execution-context.html"}},[t._v("来源")]),t._v("）），执行 1 处代码调用 "),s("code",[t._v("console.log")]),t._v(" 函数，该函数进入调用栈，之前 "),s("code",[t._v("script")]),t._v(" 执行上下文执行暂停（冻结），转交执行权给 "),s("code",[t._v("console.log")]),t._v("。"),s("code",[t._v("console.log")]),t._v("成为"),s("router-link",{attrs:{to:"js-execution-context/js-execution-context.html"}},[t._v("当前执行中的执行上下文")]),t._v("（"),s("code",[t._v("running execution context")]),t._v("）。"),s("code",[t._v("console.log")]),t._v(" 执行完成立即弹出调用栈，"),s("code",[t._v("script")]),t._v(" 恢复执行。")],1)]),t._m(55),t._m(56),s("li",[s("p",[t._v("因为第 3 步，已经在本轮宏任务完成前 "),s("code",[t._v("resolved")]),t._v(" ，否则，将跳过第 4 步向本轮事件循环的微任务队列添加回调函数（"),s("router-link",{attrs:{to:"js-promise.html"}},[t._v("来源")]),t._v("）。调用 "),s("code",[t._v("ins")]),t._v(" 的 "),s("code",[t._v("then")]),t._v(" 方法，将第一个 "),s("code",[t._v("then")]),t._v(" 中回调添加到 "),s("code",[t._v("微任务队列")]),t._v("，继续执行，将第二个 "),s("code",[t._v("then")]),t._v(" 中回调添加到 "),s("code",[t._v("微任务队列")]),t._v("。")],1)]),t._m(57),t._m(58),t._m(59),t._m(60)]),s("p",[s("strong",[t._v("注")]),t._v("："),s("code",[t._v("JavaScript")]),t._v(" 中在某一函数内部调用另一函数时，会暂停（冻结）当前函数的执行，并将当前函数的执行权转移给新的被调用的函数（具体解析见"),s("router-link",{attrs:{to:"js-execution-context/js-execution-context.html"}},[t._v("章节 - 执行上下文")]),t._v("）。")],1),s("p",[t._v("示例总结：")]),s("ol",[t._m(61),t._m(62),t._m(63),s("li",[t._m(64),s("ul",[s("li",[s("strong",[t._v("特别地")]),t._v("，只有 "),s("code",[t._v("Promise")]),t._v(" 中的状态为 "),s("code",[t._v("resolved")]),t._v(" 或 "),s("code",[t._v("rejected")]),t._v(" 后（"),s("a",{attrs:{href:"https://promisesaplus.com/#point-26",target:"_blank",rel:"noopener noreferrer"}},[t._v("Promise 标准"),s("OutboundLink")],1),t._v("），才会调用 "),s("code",[t._v("Promise")]),t._v(" 的原型方法（即 "),s("a",{attrs:{href:"https://promisesaplus.com/#point-26",target:"_blank",rel:"noopener noreferrer"}},[t._v("then"),s("OutboundLink")],1),t._v("、"),s("code",[t._v("catch")]),t._v("（因为是 "),s("code",[t._v("then")]),t._v(" 的"),s("a",{attrs:{href:"https://www.ecma-international.org/ecma-262/#sec-promise.prototype.catch",target:"_blank",rel:"noopener noreferrer"}},[t._v("语法糖"),s("OutboundLink")],1),t._v("，所以与 "),s("code",[t._v("then")]),t._v(" 同理）、"),s("code",[t._v("finally")]),t._v("（"),s("code",[t._v("onfinally")]),t._v("时"),s("a",{attrs:{href:"https://tc39.github.io/ecma262/#sec-promise.prototype.finally",target:"_blank",rel:"noopener noreferrer"}},[t._v("触发"),s("OutboundLink")],1),t._v("）），才会将回调函数到添加微任务队列中。")])])]),t._m(65)]),s("p",[t._v("以下是在客户端（Node.js 可能有不同结果）的输入结果：")]),t._m(66),t._m(67),t._m(68),s("p",[t._v("一般地，在 JS 开发过程中，凡是可能造成代码阻塞的地方都可根据实际情况考虑使用异步操作。比如，数据获取等等。")])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"事件循环-event-loop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件循环-event-loop","aria-hidden":"true"}},[this._v("#")]),this._v(" 事件循环 event loop")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("单线程的实现方式就是事件循环（"),e("code",[this._v("event loop")]),this._v("）。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"事件循环定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件循环定义","aria-hidden":"true"}},[this._v("#")]),this._v(" 事件循环定义")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"任务源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#任务源","aria-hidden":"true"}},[this._v("#")]),this._v(" 任务源")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("该宏任务的目的在于，将整体代码段（或理解为模块）推入执行上下文栈（"),e("code",[this._v("execution context stack")]),this._v("）中。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("比如设置一些事件监听程序，一些声明，执行一些初始任务。在执行完成该任务时，会建立词法作用域等一系列相关运行参数。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("setTimeout，setInterval，setImmediate（服务端 API）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("DOM 操作")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("网络任务")]),e("ul",[e("li",[this._v("Ajax 请求")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("history traversal")]),e("ul",[e("li",[this._v("history.back()")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("li",[s("p",[t._v("其中包括常见 DOM2（"),s("code",[t._v("addEventListener")]),t._v("）和 DOM0（"),s("code",[t._v("onHandle")]),t._v("）级"),s("strong",[t._v("事件监听回调函数")]),t._v("。如 "),s("code",[t._v("click")]),t._v(" 事件回调函数等。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("UI rendering")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("Promise 原型方法（即 "),e("code",[this._v("then")]),this._v("、"),e("code",[this._v("catch")]),this._v("、"),e("code",[this._v("finally")]),this._v("）中被调用的回调函数")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("用于监听节点是否发生变化")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("Object.observe(已废弃)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("macrotask")]),this._v(" 和 "),e("code",[this._v("microtask")]),this._v(" 中的每一项都称之为一个 "),e("strong",[this._v("任务源")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("以上分类中，每一项执行时均占用"),e("code",[this._v("当前正在运行执行上下文")]),this._v("（"),e("code",[this._v("running execution context")]),this._v("）（线程）。如，可理解为浏览器渲染线程与 JS 执行共用一个线程。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("依据标准拓展")]),this._v("：")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("li",[s("p",[t._v("在 "),s("code",[t._v("W3C")]),t._v(" 或 "),s("code",[t._v("WHATWG")]),t._v(" 中除非特别指明，否则 "),s("code",[t._v("task")]),t._v(" 即是指 "),s("code",[t._v("macrotask")]),t._v("。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("solitary callback：Promise 原型的原型方法，即 "),e("code",[this._v("then")]),this._v("、"),e("code",[this._v("catch")]),this._v("、"),e("code",[this._v("finally")]),this._v(" 能够调用单独的回调函数的方法。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("blockquote",[e("p",[this._v("all callbacks passed to process.nextTick() will be resolved before the event loop continues.")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"任务队列-task-queue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#任务队列-task-queue","aria-hidden":"true"}},[this._v("#")]),this._v(" 任务队列 task queue")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("任务队列分为 "),e("code",[this._v("宏任务队列")]),this._v(" 和 "),e("code",[this._v("微任务队列")]),this._v("。一个事件循环中可能有一个或多个任务队列。因为在执行一个宏任务时，可能产生微任务调用，即产生新的微任务队列。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("相同类型")]),this._v("的任务源的任务被调用时进入相同的任务队列，反之进入不同的任务队列。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"标准（w3c-and-whatwg）中的队列模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标准（w3c-and-whatwg）中的队列模型","aria-hidden":"true"}},[this._v("#")]),this._v(" 标准（W3C and WHATWG）中的队列模型")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("注")]),this._v("：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("每个事件循环都有一个 "),e("code",[this._v("当前执行中的任务")]),this._v("（"),e("code",[this._v("currently running task")]),this._v("），用于轮询队列中的任务（"),e("code",[this._v("handle reentrancy")]),this._v("）。")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("每个事件循环都有一个 "),s("code",[t._v("已执行 microtask 检查点标志")]),t._v("（"),s("code",[t._v("performing a microtask checkpoint flag")]),t._v("）（初始值一定为 false）表示已经执行了 "),s("code",[t._v("microtask")]),t._v(" 检查点，用于阻止执行 "),s("code",[t._v("microtask checkpoint")]),t._v(" 算法的可重入调用。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("li",[s("p",[t._v("在 "),s("code",[t._v("browsing context")]),t._v(" 事件循环的情况下（与第 8 步并列），选择当前 "),s("code",[t._v("task queue")]),t._v(" 中"),s("strong",[t._v("最早")]),t._v("加入的 task。如果没有任务被选中（即当前 "),s("code",[t._v("task queue")]),t._v(" 为空），那么直接跳转到第 6 步 "),s("code",[t._v("Microtasks")])]),s("ul",[s("li",[t._v("如 "),s("code",[t._v("Ajax")]),t._v(" 请求返回数据时，若当前 "),s("code",[t._v("task queue")]),t._v(" 为空时，将直接跳转执行回调函数微任务。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("设置当前事件循环的 "),e("code",[this._v("当前执行中的任务")]),this._v(" 为第 1 步被选出的 task。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("重置当前事件循环的 "),e("code",[this._v("当前执行中的任务")]),this._v(" 为默认值 null。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("从当前的 "),e("code",[this._v("task queue")]),this._v(" 中移除在第 3 步执行过的任务。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("Microtasks")]),this._v("：执行 "),e("code",[this._v("microtask")]),this._v(" 检查点。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("当 "),e("code",[this._v("已执行 microtask 检查点标志")]),this._v(" 为 false 时：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("设置 "),e("code",[this._v("已执行 microtask 检查点标志")]),this._v(" 为 true。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[e("code",[this._v("操作（handling) microtask 队列")]),this._v("：在当前 "),e("code",[this._v("microtask queue")]),this._v(" 为空时，跳转到步骤 "),e("code",[this._v("Done")]),this._v(" 之后。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("选中 "),e("code",[this._v("microtask queue")]),this._v(" 中最早加入的 "),e("code",[this._v("microtask")]),this._v("。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("设置当前事件循环的 "),e("code",[this._v("当前执行中的任务")]),this._v(" 值为上一步选中的 "),e("code",[this._v("microtask")]),this._v("。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("重置置当前事件循环的 "),e("code",[this._v("当前执行中的任务")]),this._v(" 值为 null。")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("li",[s("p",[t._v("从 "),s("code",[t._v("microtask queue")]),t._v(" 中移除第 5 步 "),s("code",[t._v("Run")]),t._v(" 被执行的 "),s("code",[t._v("microtask")]),t._v("，回到第 3 步 "),s("code",[t._v("操作（handling) microtask 队列")]),t._v("。")]),s("ul",[s("li",[s("strong",[t._v("重点")]),t._v("：为在一个事件循环中，总是要"),s("strong",[t._v("清空")]),t._v("当前事件循环中的微任务队列"),s("strong",[t._v("才会进行重渲染")]),t._v("（"),s("code",[t._v("Vue.js")]),t._v(" 的 DOM 更新原理）。")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[s("code",[t._v("Done")]),t._v("：对于每一个 "),s("code",[t._v("responsible event loop")]),t._v(" 是当前事件循环的环境设置对象（"),s("code",[t._v("environment setting object")]),t._v("），向它（环境设置对象）告知关于 "),s("code",[t._v("rejected")]),t._v(" 状态的 "),s("code",[t._v("Promise")]),t._v(" 对象的信息。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("此步骤主要是向开发者告知存在未被捕获的 "),e("code",[this._v("rejected")]),this._v(" 状态的 "),e("code",[this._v("Promise")]),this._v("。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("执行并清空 "),e("code",[this._v("Indexed Database")]),this._v("（用于本地存储数据的 API） 的修改请求。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("重置 "),e("code",[this._v("已执行 microtask 检查点标志")]),this._v(" 为 false。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("当一个复合微任务（"),e("code",[this._v("compound microtask")]),this._v("）执行时，客户端必须去执行一系列的复合微任务的"),e("code",[this._v("子任务")]),this._v("（subtask）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("设置 parent 为当前事件循环的 "),e("code",[this._v("当前执行中的任务")]),this._v("。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("设置 "),e("code",[this._v("子任务")]),this._v(" 为一个由一系列给定步骤组成的新 microtask。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("设置 "),e("code",[this._v("当前执行中的任务")]),this._v(" 为 "),e("code",[this._v("子任务")]),this._v("。这种微任务的任务源是微任务类型的任务源。这是一个复合微任务的 "),e("code",[this._v("子任务")]),this._v("。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("重置当前事件循环的 "),e("code",[this._v("当前执行中的任务")]),this._v(" 为 parent。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("更新 DOM 渲染。")]),e("ul",[e("li",[this._v("一个宏任务 task "),e("strong",[this._v("至此")]),this._v("整体执行结束（包含调用，执行，重渲染），也是一个"),e("strong",[this._v("事件循环结束")]),this._v("。")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("li",[s("p",[t._v("（与第 1 步并列）如果当前的事件循环是 "),s("code",[t._v("web works")]),t._v(" 的事件循环，并且在当前事件循环中的 "),s("code",[t._v("task queue")]),t._v(" 为空，并且 "),s("code",[t._v("WorkerGlobalScope")]),t._v(" 对象的 "),s("code",[t._v("closing")]),t._v(" 为 true，那么将摧毁当前事件循环，并取消以上的事件循环步骤，并恢复执行一个 "),s("code",[t._v("web worker")]),t._v(" 的步骤。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("回到第 1 步执行下一个事件循环。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例","aria-hidden":"true"}},[this._v("#")]),this._v(" 示例")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("// script")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\nconsole"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("log")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'I am from script beginning'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// 该匿名函数称为匿名函数a")]),t._v("\n  console"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("log")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'I am from setTimeout'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("1000")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ins "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Promise")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resolve"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("log")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'I am from internal part'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{attrs:{class:"token function"}},[t._v("resolve")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\nins"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("then")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("log")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'I am from 1st ins.then()'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("then")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("log")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'I am from 2nd ins.then()'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\nconsole"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("log")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'I am from script bottom'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("以上整个代码段即是，"),e("code",[this._v("macro-task")]),this._v(" 中的 "),e("code",[this._v("script")]),this._v(" 任务源。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[e("code",[this._v("setTimeout")]),this._v(" 是一个任务分发器，该函数本身会立即执行，延迟执行的是其中传入的参数（匿名函数 a）。"),e("code",[this._v("script")]),this._v(" 暂停执行，内部建立一个 1 秒计时器。"),e("code",[this._v("script")]),this._v(" 恢复执行接下来的代码。1 秒后，再将匿名函数 a 插入宏任务队列（根据宏任务队列是否有之前加入的宏任务，可能不会立即执行）。")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("li",[s("p",[t._v("声明恒定变量 "),s("code",[t._v("ins")]),t._v("，并初始化为 "),s("code",[t._v("Promise")]),t._v(" 实例。特别地，"),s("code",[t._v("Promise")]),t._v(" 内部代码会在本轮事件循环立即执行。那么此时， "),s("code",[t._v("script")]),t._v(" 冻结，开始执行 "),s("code",[t._v("console.log")]),t._v("，"),s("code",[t._v("console.log")]),t._v(" 弹出调用栈后，"),s("code",[t._v("resolve()")]),t._v(" 进入调用栈，将 "),s("code",[t._v("Promise")]),t._v(" 状态 "),s("code",[t._v("resolved")]),t._v("，并之后弹出调用栈，此时恢复 script 执行。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("如同 1 时的执行原理。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[e("code",[this._v("script")]),this._v(" 宏任务执行完成，弹出执行上下文栈。此时，微任务队列中有两个 "),e("code",[this._v("then")]),this._v(" 加入的回调函数等待执行。另外，若距 2 超过 1 秒钟，那么宏任务队列中有一个匿名函数 a 等待执行，否则，此时宏任务队列为空。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("在当前宏任务执行完成并弹出调用栈后，开始"),e("strong",[this._v("清空")]),this._v("因宏任务执行而产生的微任务队列。首先执行 "),e("code",[this._v("console.log('I am from 1st ins.then()')")]),this._v("，之后执行 "),e("code",[this._v("console.log('I am from 2nd ins.then()')")]),this._v("。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("微任务队列清空后，开始调用下一宏任务（即进入下一个事件循环）或等待下一宏任务加入任务队列。此时，在 2 中计时 1 秒后，加入匿名函数 a 至宏任务队列，此时，因之前宏任务 script 执行完成而清空，那么将匿名函数 a 加入调用栈执行，输出 "),e("code",[this._v("I am from setTimeout")]),this._v("。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[e("strong",[this._v("在一个代码段（或理解为一个模块）中")]),this._v("，所有的代码都是基于一个 "),e("code",[this._v("script")]),this._v(" 宏任务进行的。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("在当前宏任务执行完成后，"),e("strong",[this._v("必须")]),this._v("要清空因执行宏任务而产生的"),e("code",[this._v("微任务队列")]),this._v("。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("只有当前微任务队列清空后，才会调用下一个宏任务队列中的任务。即进入下一个事件循环。")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[s("code",[t._v("new Promise")]),t._v(" 时，"),s("code",[t._v("Promise")]),t._v(" 参数中的匿名函数是"),s("strong",[t._v("立即执行")]),t._v("的。被添加进"),s("code",[t._v("微任务队列")]),t._v("的是 "),s("code",[t._v("then")]),t._v(" 中的回调函数。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("li",[s("p",[s("code",[t._v("setTimeout")]),t._v(" 是作为任务分发器的存在，他自身执行会创建一个计时器，只有待计时器结束后，才会将 "),s("code",[t._v("setTimeout")]),t._v(" 中的第一参数函数添加至"),s("code",[t._v("宏任务队列")]),t._v("。换一种方式理解，"),s("code",[t._v("setTimeout")]),t._v(" 中的函数"),s("strong",[t._v("一定不是在当前事件循环")]),t._v("中被调用。")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("I am from script beginning\nI am from internal part\nI am from script bottom\nI am from 1st ins.then"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nI am from 2nd ins.then"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nI am from setTimeout\n")])]),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"事件循环拓展应用-——-异步操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件循环拓展应用-——-异步操作","aria-hidden":"true"}},[this._v("#")]),this._v(" 事件循环拓展应用 —— 异步操作")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[e("p",[this._v("定时任务：setTimeout，setInterval")])]),e("li",[e("p",[this._v("请求数据：Ajax 请求，图片加载")])]),e("li",[e("p",[this._v("事件绑定")])])])}],!1,null,null,null);e.default=r.exports}}]);